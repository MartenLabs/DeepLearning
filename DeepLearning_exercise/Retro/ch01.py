
# Import 
"""
- keras
- Dense
- Sequential
- Model

- numpy
- matplotlib
- seaborn
- warnings
------------------------------------------------------------------------------------------------------------
"""




# 데이터 불러오기 
"""------------------------------------------------------------------------------------------------------------"""






# 데이터의 크기를 shape함수를 통해 출력 
"""------------------------------------------------------------------------------------------------------------"""





# 28x28의 흑백 이미지를 plt를 이용해 출력 
"""------------------------------------------------------------------------------------------------------------"""




# 하나의 이미지에 대해 0이 아닌 값을 출력하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""



# dtype을 이용해 이미지의 np arrray type을 확인 
"""------------------------------------------------------------------------------------------------------------"""




# test_images의 shape과 dtype, 0이 아닌 숫자를 출력하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""



# train/test 전체 데이터에서 각 images, labels의 min, max를 출력하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""





# train/test데이터의 타입을 dtype으로 확인헤보고 실수형으로 전환하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""





# image의 값이 0 ~ 1 사이의 값을 같도록 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""



# 노멀라이즈 후 min/max, shape, 0이 아닌 값, dtype등을 확인 하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""




# (60000, 28, 28)인 train_images에서 (5, 28, 28)을 획득하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""



# np.hstack은 height 방향을 배열을 풀어서 width방향으로 연결해준다 
# 해당 기능을 사용하면 (number of images, image_height, image_width)의 shape을 
# (image_height, image_width * number of images)로 바꿔줄 수 있다 
"""------------------------------------------------------------------------------------------------------------"""






# transpose는 tensorflow의 axis를 섞는 기능을 수행한다 
# 해당 기능을 이용해서 (28, 140)을 만드는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""





# (28, 140)의 이미지를 plt로 출력해보시오 
"""------------------------------------------------------------------------------------------------------------"""




# (28, 140)이 된 tensor를 plt로 흑백으로 출력하라 
# 또한 해당되는 label의 값도 print로 출력
"""------------------------------------------------------------------------------------------------------------"""




# np.random.random함수를 이용하여 0~1사이의 랜덤값을 3회 print로 출력 
"""------------------------------------------------------------------------------------------------------------"""



# np.random.random함수와 shape파라미터를 (28, 28)의 랜덤 노이즈를 생성 
"""------------------------------------------------------------------------------------------------------------"""




# plt를 통해 random (28, 28) 노이즐르 2회 출력하는 코드를 작성 하고 이미지 출력
"""------------------------------------------------------------------------------------------------------------"""




# 가우시안 노이즈 함수를 이용해 mean(mu) = 0.1, stdddev = 0.1, size = 1인 랜덤 값을 3번 출력 
"""------------------------------------------------------------------------------------------------------------"""





# 가우시안 노이즈 함수 mean(mu) = 3.0, stddev = 0.1, size = 1,을 3회 출력 
# 또한 mean(mu) = 0.0, stddev = 0.01, size = 1을 3회 출력 
"""------------------------------------------------------------------------------------------------------------"""




# 가우시안 노이즈 함수를  mean(mu) = 0.0, stddev = 0.01, size = (28, 28) 로 생성 후 plt로 출력 
"""------------------------------------------------------------------------------------------------------------"""




# train_images[5]와 가우시안 노이즈 (28, 28)을 더한 뒤 noisy_image 변수에 할당하는 코드를 작성 
# mu = 0.5, std = 0.1
"""------------------------------------------------------------------------------------------------------------"""





# noisy_image를 plt로 출력하는 코드 작성 
"""------------------------------------------------------------------------------------------------------------"""





# 위의 방법을 전부 활용하여 train_images와 test_images 데이터에 랜덤 노이즈를 추가한 train_noisy_images와 test_noisy_images를 생성
"""------------------------------------------------------------------------------------------------------------"""




# train/test labels에 onehot encoding을 적용하여 shape을 (배치사이즈,) 에서 (배치사이즈, 클래스 개수)로 변경하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""



# input (28, 28), 64 unit의 simple RNN(tanh), 10 unit의 fully-connected(softmax) 가진 모델 작성 
"""------------------------------------------------------------------------------------------------------------"""



# 모델 요약정보 출력 
"""------------------------------------------------------------------------------------------------------------"""



# 만든 모델에 loss는 categorical_crossentropy, optimizer는 adam 매트릭은 accuracy으로 설정하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""




# train_noisy_images를 학습시키고 5 epochs을 돌리고 그 진행 사항을 hist에 저장하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""




# hist의 accuracy plt의 plot을 이용하여 출력하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""




# 모델에 test_noisy_images 중 1장을 넣고 결과를 받는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""





# test_noisy_images[0], test_images[0]를 width 방향으로 결합하여 (28, 28 * 2) 의 이미지를 만들어 plt로 출력하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""





# res와 test_labels[0]의 결과를 plt.bar로 확인

"""------------------------------------------------------------------------------------------------------------"""





# 모델을 저장하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""





# 모델을 로드하는 코드를 작성
"""------------------------------------------------------------------------------------------------------------"""




# 로드한 모델을 test 데이터로 평가
"""------------------------------------------------------------------------------------------------------------"""
